from datetime import datetime

import requests
from aiogram import types, Router, F
from aiogram.types import ReplyKeyboardRemove, Message

from loader import api_weather

start_routers = Router()


async def start_list_categories(message: types.Message):
    """–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    buttons = [

        [
            types.InlineKeyboardButton(text='üéÇ –¢–æ—Ä—Ç—ã', callback_data='cakes')
        ],
        [
            types.InlineKeyboardButton(text='ü¶Ñ –ú–∞—Ä—à–º–µ–ª–ª–æ—É', callback_data='marshmallow')
        ],
        [
            types.InlineKeyboardButton(text='üå∑ –ó–µ—Ñ–∏—Ä–Ω—ã–µ —Ü–≤–µ—Ç—ã', callback_data='flowers')
        ],
        [
            types.InlineKeyboardButton(text='ü•Æ –¢–∞—Ä—Ç–∞–ª–µ—Ç–∫–∏', callback_data='tartlets')
        ],
        [
            types.InlineKeyboardButton(text='üç¨ –ö–æ–Ω—Ñ–µ—Ç—ã', callback_data='sweets')
        ]

    ]

    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=reply_markup)


async def buttons_below(message: types.Message):
    buttons = [
        [
            types.KeyboardButton(text='–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É...')
        ],
        [
            types.KeyboardButton(text='Instagram ')
        ],

    ]
    reply_markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b>', parse_mode='HTML',
        reply_markup=reply_markup
    )


@start_routers.message(F.text == '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É...')
async def weather(message: Message):
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–æ—Ä–æ–¥:'
    )


@start_routers.message()
async def get_weather(message: Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    api_data = requests.get(
        f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={api_weather}&units=metric&lang=ru'
    )
    data = api_data.json()
    if data['cod'] == 200:
        city = data['name']
        current_weather = data['main']['temp']
        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']
        atmosphere_pressure = data['main']['grnd_level']
        sunrise = datetime.fromtimestamp(data['sys']['sunrise'])
        sunset = datetime.fromtimestamp(data['sys']['sunset'])
        length_of_day = datetime.fromtimestamp(data['sys']['sunset']) - datetime.fromtimestamp(data['sys']['sunrise'])
        await message.reply(f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n'
                            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_weather} –°¬∞ {wd}\n'
                            f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                            f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n'
                            f'–î–∞–≤–ª–µ–Ω–∏–µ: {atmosphere_pressure} –º–º.—Ä—Ç.—Å—Ç.\n'
                            f'–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}\n'
                            f'–ó–∞—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunset}\n'
                            f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_day}')
    else:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–æ—Ä–æ–¥')

# """–ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–µ–ø—è—Ç—Å—è —Å–Ω–∏–∑—É"""
# async def start_list_categories(message: types.Message):
#     buttons = ['üéÇ –¢–æ—Ä—Ç—ã', 'ü¶Ñ –ú–∞—Ä—à–º–µ–ª–ª–æ—É', 'üå∑ –ó–µ—Ñ–∏—Ä–Ω—ã–µ —Ü–≤–µ—Ç—ã', 'ü•Æ –¢–∞—Ä—Ç–∞–ª–µ—Ç–∫–∏', 'üç¨ –ö–æ–Ω—Ñ–µ—Ç—ã']
#     builder = ReplyKeyboardBuilder()
#     for button in buttons:
#         builder.add(types.KeyboardButton(text=str(button)))
#     builder.adjust(4)
#     await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=builder.as_markup(resize_keyboard=True))
